name: syntax-compose

volumes:
  syntax_postgres_data:

networks:
  backend_network:
    name: syntax_compose_backend_network
    driver: bridge
    internal: true
    external: false
    labels:
      com.syntaxfa.description: "Backend network"
      com.syntaxfa.department: "IT/Backend"
  webserver_network:
    name: syntax_compose_webserver_network
    driver: bridge
    external: false
    internal: false
    labels:
      com.syntaxfa.description: "Backend webserver network"
      con.syntaxfa.department: "IT/Backend"

services:
  redis_syntax:
    container_name: ${REDIS_HOST:?error}
    hostname: ${REDIS_HOST:?error}
    image: redis:8.0.3
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:?error} --port ${REDIS_PORT:?error}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:?error}
      REDIS_PORT: ${REDIS_PORT:?error}
    volumes:
      - type: bind
        source: ./redis.conf
        target: /usr/local/etc/redis.conf
        read_only: true
        # ./redis.conf:/usr/local/etc/redis.conf:ro
    networks:
      - backend_network
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "-p", "${REDIS_PORT:?error}", "-a", "${REDIS_PASSWORD:?error}", "PING" ]
      interval: 5s
      timeout: 5s
      retries: 10

  syntax_postgresql:
    image: postgres:17
    container_name: syntax_postgresql
    hostname: ${POSTGRES_HOST:?error}
    command: -p ${POSTGRES_PORT:?error}
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB_NAME:?error}
      - POSTGRES_USER=${POSTGRES_USERNAME:?error}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?error}
    volumes:
      - syntax_postgres_data:/var/lib/postgresql/data
    networks:
      - backend_network
    healthcheck:
      test: [CMD-SHELL, "sh -c 'pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DB_NAME} -p ${POSTGRES_PORT}'"]
      interval: 10s
      timeout: 5s
      retries: 5

  syntax_pgbouncer:
    image: bitnami/pgbouncer:1.24.1
    container_name: syntax_pgbouncer
    hostname: syntax_pgbouncer
    restart: always
    environment:
      # Connection to DB
      PGBOUNCER_DATABASE: ${POSTGRES_DB_NAME}
      PGBOUNCER_DATABASE_HOST: ${POSTGRES_HOST}
      PGBOUNCER_DATABASE_PORT: ${POSTGRES_PORT}
      PGBOUNCER_DATABASE_USER: ${POSTGRES_USERNAME}
      PGBOUNCER_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      # PgBouncer settings
      PGBOUNCER_LISTEN_ADDR: 0.0.0.0
      PGBOUNCER_LISTEN_PORT: 6432
      PGBOUNCER_AUTH_TYPE: md5
      PGBOUNCER_POOL_MODE: transaction
      PGBOUNCER_MAX_CLIENT_CONN: 500
      PGBOUNCER_DEFAULT_POOL_SIZE: 16
      PGBOUNCER_MIN_POOL_SIZE: 5
      PGBOUNCER_RESERVE_POOL_SIZE: 10
      PGBOUNCER_RESERVE_POOL_TIMEOUT: 5
      PGBOUNCER_SERVER_IDLE_TIMEOUT: 300
      PGBOUNCER_CONNECT_TIMEOUT: 5
      PGBOUNCER_LOGIN_RETRY: 5
      PGBOUNCER_QUERY_TIMEOUT: 0
      # PgBouncer health-check environments
      POSTGRESQL_USERNAME: ${POSTGRES_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRESQL_HOST: ${POSTGRES_HOST}
      POSTGRESQL_PORT: ${POSTGRES_PORT}
    depends_on:
      syntax_postgresql:
        condition: service_healthy
    networks:
      - backend_network

  syntax_celery_worker:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: celery -A config worker -B --loglevel=info
    env_file:
      - .env
    depends_on:
      - syntax_app
      - redis_syntax
    networks:
      - backend_network
    volumes:
      - .:/code/
    restart: always

  syntax_celery_beat:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: 'celery -A config beat -l info -S django'
    volumes:
      - .:/code/
    depends_on:
      - syntax_app
      - syntax_celery_worker
    networks:
      - backend_network
    restart: always

  syntax_app:
    build:
      context: .
      dockerfile: Dockerfile
    hostname: syntax_project
    container_name: syntaxfa_container
    env_file:
      - .env
    restart: always
    command: sh -c "python3 entrypoint.py"
    depends_on:
      redis_syntax:
        condition: service_healthy
        restart: false
    networks:
      - backend_network
      - webserver_network
    volumes:
      - type: bind
        source: .
        target: /code/
      - type: bind
        source: ./media
        target: /code/media
      - type: bind
        source: ./static
        target: /code/static
    labels:
      com.syntaxfa.project: "syntaxfa"
      com.syntaxfa.description: "Syntaxfa backend application"
      com.syntaxfa.department: "IT/Backend"

  nginx_syntax:
    image: nginx:latest
    hostname: nginx_syntax
    container_name: nginx_syntax_container
    command: nginx -g 'daemon off;'
    restart: always
    depends_on:
      syntax_app:
        condition: service_started
        restart: false
    ports:
      - 80:80
    networks:
      - webserver_network
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
      - type: bind
        source: ./media
        target: /code/media
        read_only: true
      - type: bind
        source: ./static
        target: /code/static
        read_only: true
